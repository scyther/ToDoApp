{"version":3,"sources":["components/Todo-form.js","actions/action-creators.js","actions/action-types.js","components/Todos-list.js","reducer/todo.js","store.js","App.js","serviceWorker.js","index.js"],"names":["mapDispatchToProps","addtodo","todo","type","payload","connect","state","useState","title","setTitle","handleSubmit","e","preventDefault","alert","id","v4","Form","className","onSubmit","InputGroup","Input","name","value","onChange","target","InputGroupAddon","addonType","Button","onClick","removetodo","todos","Container","ListGroup","map","ListGroupItem","key","initialState","store","createStore","action","filter","App","Row","Col","md","offset","size","sm","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4TAyCMA,EAAqB,CAAEC,QCvCN,SAACC,GAAD,MAAW,CAC9BC,KCHoB,WDIpBC,QAASF,KDsCEG,eAFS,SAACC,GAAD,MAAY,KAEIN,EAAzBK,EApCE,SAAC,GAAiB,IAAfJ,EAAc,EAAdA,QAAc,EACPM,mBAAS,IADF,mBAC1BC,EAD0B,KACnBC,EADmB,KAG3BC,EAAe,SAACC,GAErB,GADAA,EAAEC,iBACY,KAAVJ,EACH,OAAOK,MAAM,mBAEd,IAAMX,EAAO,CACZM,QACAM,GAAIC,eAELd,EAAQC,GACRO,EAAS,KAGV,OACC,kBAACO,EAAA,EAAD,CAAMC,UAAU,OAAOC,SAAUR,GAChC,kBAACS,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,CACCjB,KAAK,OACLkB,KAAK,OACLP,GAAG,aACHQ,MAAOd,EACPe,SAAU,SAACZ,GAAD,OAAOF,EAASE,EAAEa,OAAOF,UAEpC,kBAACG,EAAA,EAAD,CAAiBC,UAAU,WAC1B,kBAACC,EAAA,EAAD,CAAQC,QAASlB,GAAjB,a,wCGFCV,EAAqB,CAAE6B,WFxBH,SAACf,GAAD,MAAS,CAC/BX,KCPuB,cDQvBC,QAASU,KEuBET,eAJS,SAACC,GAAD,MAAY,CACnCwB,MAAOxB,KAGgCN,EAAzBK,EA3BG,SAAC,GAA2B,IAAzByB,EAAwB,EAAxBA,MAAOD,EAAiB,EAAjBA,WAO3B,OAAOC,IAAU,GAChB,GAEA,kBAACC,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,KACEF,EAAMG,KAAI,SAAC/B,GAAD,OACV,kBAACgC,EAAA,EAAD,CAAeC,IAAKjC,EAAKY,IACvBZ,EAAKM,MACN,0BAAMS,UAAU,cAAcW,QAAS,kBAbtBd,EAauCZ,EAAKY,QAZ/De,EAAWf,GADO,IAACA,IAajB,iB,gBClBAsB,EAAe,GCGNC,EAFDC,aDCC,WAAmC,IAAlChC,EAAiC,uDAAzB8B,EAAcG,EAAW,uCAChD,OAAQA,EAAOpC,MACd,IFNsB,WEOrB,MAAM,GAAN,mBAAWG,GAAX,CAAkBiC,EAAOnC,UAC1B,IFPyB,cEQxB,OAAOE,EAAMkC,QAAO,SAACtC,GAAD,OAAWA,EAAKY,KAAOyB,EAAOnC,WACnD,QACC,OAAOE,MEsBKmC,EAxBJ,WACV,OACC,kBAAC,IAAD,CAAUJ,MAAOA,GACjB,kBAACN,EAAA,EAAD,CAAWd,UAAU,oBACpB,kBAACyB,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,CAAKC,GAAI,CAAEC,OAAQ,IAAKC,KAAM,KAAOC,GAAG,MACvC,6DAGF,kBAACL,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,CAAKC,GAAI,CAAEC,OAAQ,IAAKC,KAAM,KAAOC,GAAG,MACvC,kBAAC,EAAD,QAGD,kBAACL,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,CAAKC,GAAI,CAAEC,OAAQ,IAAKC,KAAM,KAAOC,GAAG,MACvC,kBAAC,EAAD,WCbeC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9423b813.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Form, Input, Button, InputGroupAddon, InputGroup } from \"reactstrap\";\r\nimport { v4 } from \"uuid\";\r\nimport { addtodo } from \"../actions/action-creators\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst TodoForm = ({ addtodo }) => {\r\n\tconst [title, setTitle] = useState(\"\");\r\n\r\n\tconst handleSubmit = (e) => {\r\n\t\te.preventDefault();\r\n\t\tif (title === \"\") {\r\n\t\t\treturn alert(\"Enter Something\");\r\n\t\t}\r\n\t\tconst todo = {\r\n\t\t\ttitle,\r\n\t\t\tid: v4(),\r\n\t\t};\r\n\t\taddtodo(todo);\r\n\t\tsetTitle(\"\");\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Form className='form' onSubmit={handleSubmit}>\r\n\t\t\t<InputGroup>\r\n\t\t\t\t<Input\r\n\t\t\t\t\ttype='text'\r\n\t\t\t\t\tname='text'\r\n\t\t\t\t\tid='todo input'\r\n\t\t\t\t\tvalue={title}\r\n\t\t\t\t\tonChange={(e) => setTitle(e.target.value)}\r\n\t\t\t\t/>\r\n\t\t\t\t<InputGroupAddon addonType='prepend'>\r\n\t\t\t\t\t<Button onClick={handleSubmit}>Add</Button>\r\n\t\t\t\t</InputGroupAddon>\r\n\t\t\t</InputGroup>\r\n\t\t</Form>\r\n\t);\r\n};\r\n\r\nconst mapStateToProps = (state) => ({});\r\nconst mapDispatchToProps = { addtodo };\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoForm);\r\n","import {ADD_TODO,REMOVE_TODO} from './action-types'\r\n\r\nexport const addtodo = (todo) => ({\r\n    type : ADD_TODO,\r\n    payload: todo\r\n})\r\n\r\nexport const removetodo = (id) => ({\r\n    type : REMOVE_TODO,\r\n    payload: id\r\n})","export const ADD_TODO = 'ADD_TODO';\r\nexport const REMOVE_TODO = 'REMOVE_TODO';","import React from \"react\";\r\nimport { Container, ListGroup, ListGroupItem } from \"reactstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport { removetodo } from \"../actions/action-creators\";\r\n\r\nconst TodosList = ({ todos, removetodo }) => {\r\n\r\n   const handleDone = (id) => {\r\n\t   removetodo(id)\r\n   }\r\n\r\n\r\n\treturn todos === [] ? (\r\n\t\t\"\"\r\n\t) : (\r\n\t\t<Container>\r\n\t\t\t<ListGroup>\r\n\t\t\t\t{todos.map((todo) => (\r\n\t\t\t\t\t<ListGroupItem key={todo.id}>\r\n\t\t\t\t\t\t{todo.title}\r\n\t\t\t\t\t\t<span className='float-right' onClick={() => handleDone(todo.id)}>Done</span>\r\n\t\t\t\t\t</ListGroupItem>\r\n\t\t\t\t))}\r\n\t\t\t</ListGroup>\r\n\t\t</Container>\r\n\t);\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n\ttodos: state,\r\n});\r\nconst mapDispatchToProps = { removetodo };\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TodosList);\r\n","import { ADD_TODO, REMOVE_TODO } from \"../actions/action-types\";\r\n\r\nconst initialState = []\r\n\r\nexport default (state = initialState, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase ADD_TODO:\r\n\t\t\treturn [...state, action.payload];\r\n\t\tcase REMOVE_TODO:\r\n\t\t\treturn state.filter((todo) => (todo.id !== action.payload));\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n","import {createStore} from 'redux';\r\nimport todo from './reducer/todo';\r\n\r\nconst store = createStore(todo)\r\n\r\nexport default store;","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport TodoForm from \"./components/Todo-form\";\nimport { Row, Col, Container } from \"reactstrap\";\nimport TodosList from \"./components/Todos-list\";\nimport {Provider} from 'react-redux';\nimport store from './store'\n\nconst App =() => {\n\treturn (\n\t\t<Provider store={store}>\n\t\t<Container className=\"themed-container\">\n\t\t\t<Row>\n\t\t\t\t<Col md={{ offset: \"4\", size: \"6\" }} sm='10'>\n\t\t\t\t\t<h4>To Do App (React and Redux)</h4>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t\t<Row>\n\t\t\t<Col md={{ offset: \"3\", size: \"6\" }} sm='10'>\n\t\t\t\t<TodosList />\n\t\t\t</Col>\n\t\t\t</Row>\n\t\t\t<Row>\n\t\t\t\t<Col md={{ offset: \"3\", size: \"6\" }} sm='10'>\n\t\t\t\t\t<TodoForm />\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t</Container>\n\t\t</Provider>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}